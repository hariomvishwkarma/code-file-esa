Code for Quanity in Other Measurment Like Yard, meter. 
Agar quantity ke badle size me quantity chahiye to hum is code se kar sakte he.
Refrence link:- https://calliopequilts.com/products/spectrastatic-yonder-a-9248-b-1
(Is refrence website ka code nikala he.)

1. Code main-product:-
Custom Quantity
<div class="qty_mains">
	<label class="qtymetersla">Quantity in Yard</label>
	<div class="decimal_qty">
	  <span class=" sub" id="sub">-</span>
	  <input type="text" id="decimal" value="0.25" min="0.25" limit="2" class="newInput decimal stop-mega-menu-reinit" data-quantity-input1="">
	  <span class=" add" id="add">+</span>
	</div>
</div>

==>Yah class jo riginal quantity input he usme dalnahe 
Class=> "js-qty__num_custom"
Like =><input class="quantity__input js-qty__num_custom" type="number" name="quantity">

==>Or yah JS ko dalna he iske niche 
<script>
      let btnadd = document.querySelector('.add');
      let btnsub = document.querySelector('.sub');
      let input = document.querySelector('.decimal');
      let quant = document.querySelector('.js-qty__num_custom');

      if(true){
        var step = parseFloat(0.25);
        var min_qty = parseFloat(0.25);
      }else
      {
        var step = parseFloat();
        var min_qty = parseFloat();
      }

      let value = parseFloat(input.value);
      input.value = value.toFixed(2);
      quant.value = (input.value/step).toFixed(0);

      btnadd.addEventListener('click', function(){
        let value = parseFloat(input.value) + step;
        input.value = value.toFixed(2);
        quant.value = (input.value/step).toFixed(0);

      });

      btnsub.addEventListener('click', function(){
        let value = parseFloat(input.value) - step;
        if(value >= min_qty)
          input.value = value.toFixed(2);
        quant.value = (input.value/step).toFixed(0);

      });

      input.addEventListener('focusout', function(){
        let now_input_val = document.querySelector('.decimal').value;
        console.log(now_input_val);
        var n = (now_input_val/step).toFixed(0);
        console.log(now_input_val);
        quant.value = n;
      });
      input.addEventListener('keyup', function(){
        let now_input_val = document.querySelector('.decimal').value;
        console.log(now_input_val);
        var n = (now_input_val/step).toFixed(0);
        quant.value = n;
      });
    </script>

2. Code Cart drawer:-
Paste this code above original quantity code
<div class="decimal_qty_cart">
  <span class="sub_cart" onclick="btnsub_cart_event(this)" id="sub">-</span>
  <input onkeyup="onkeyup(this)" onfocusout="focusout(this)" type="text" limit="2" id="decimal_cart" value="{{ item.quantity | times: 0.25 }}" min="0.25"  class="newInput decimal_cart" data-quantity-input1="">
  <span class="add_cart" onclick="btnadd_cart_event(this);" id="add">+</span>
</div>
==>Yah class jo riginal quantity input he usme dalnahe 
Class=> "js-qty__num_custom"
Like =><input class="quantity__input js-qty__num_custom" type="number" name="quantity">

<script>
// document.addEventListener('DOMContentLoaded', function() {
//     var step = 1;
//     var min_qty =1;
//     var commonSet = true;
  
//     if(commonSet){
//       step = parseFloat(0.25);
//       min_qty= parseFloat(0.25);
//     }
  
  // async function updateCartDrawer(){
  //   const res = await fetch("/?section_id=cart-drawer");
  //   const text = await res.text();
  //   const html = document.createElement('div');
  //   html.innerHTML = text;

  //   const newBox = html.querySelector('.cart-drawer').innerHTML;
  //   document.querySelector('.cart-drawer').innerHTML = newBox;
  // }
  
  // document.querySelectorAll('.cart-container .cart-item .cart-item__not-image .cart-item__quantity .decimal_qty_cart span').forEach((span) =>{
  //   span.addEventListener("click", async () =>{
  //     const key = span.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute('data-key-refresh');
  //     const input = span.parentElement.querySelector('input');
  //     const currentQuantity = parseFloat(input.value)/step;
  //     const isUp = span.classList.contains('add_cart2');
  //     const newQuantity = isUp ? currentQuantity +1 : currentQuantity -1;
      
  //     if (newQuantity < min_qty) {
  //       newQuantity = min_qty;
  //     }
  //     console.log({currentQuantity, newQuantity});
  //     input.value = parseFloat(newQuantity)* step;
      
  //     const cartContainers = document.querySelectorAll(`.cart-container[data-key-refresh="${key}"]`);
  //     cartContainers.forEach(container => container.classList.add('merge-item-refreshing'));
      
  //     const res = await fetch("/cart/update.js",{
  //       method: 'post',
  //       headers: {
  //         Accept: "application/json",
  //         "Content-Type": "application/json",
  //       },
  //       body: JSON.stringify({updates: { [key]: newQuantity } }),
  //     });
  //     const json = await res.json();
      
  //     const cartRes = await fetch("/cart.js");
  //     const cartJson = await cartRes.json();
  //     document.getElementById('final-price').innerText = "$" + (cartJson.total_price / 100).toFixed(2);
  //     cartContainers.forEach(container => container.classList.remove('merge-item-refreshing'));
  //   })
  // })
// });
  
  let btnadd_Cart = document.querySelector('.add_cart');
    let btnsub_Cart = document.querySelector('.sub_cart');
    let input_Cart = document.querySelector('.decimal_cart');
    let quant_Cart = document.querySelector('.js-qty__num_custom_Cart');

    function btnadd_cart_event(el) {
      let perentnode = el.parentNode
      let input_Cart = el.previousSibling.previousSibling;
      let quant_Cart = perentnode.nextSibling.nextSibling.children[1];
      console.log(quant_Cart);

      let value = parseFloat(input_Cart.value) + step;
      input_Cart.value = value.toFixed(2);
      quant_Cart.value = (input_Cart.value/step).toFixed(0);
      console.log(quant_Cart.value);
      // alert(quant_Cart.value);
      var ev = document.createEvent('Event');
        ev.initEvent('change', true, false);
        quant_Cart.dispatchEvent(ev);
    }

    function btnsub_cart_event(el) {
      let perentnode = el.parentNode
      let input_Cart = el.nextSibling.nextSibling;
      let quant_Cart = perentnode.nextSibling.nextSibling.children[1];
      let value = parseFloat(input_Cart.value) - step;
      console.log(input_Cart);
      if(value >= min_qty){	    
      input_Cart.value = value.toFixed(2);
      quant_Cart.value = (input_Cart.value/step).toFixed(0);
      }
      var ev = document.createEvent('Event');
        ev.initEvent('change', true, false);
        quant_Cart.dispatchEvent(ev);

    
    }

    function focusout(el) {
      let perentnode = el.parentNode
      let input_Cart = el;
      let quant_Cart = perentnode.nextSibling.nextSibling.children[1];

      let value = parseFloat(input_Cart.value);
      if(value >= min_qty){
      input_Cart.value = value.toFixed(2);
      quant_Cart.value = (input_Cart.value/step).toFixed(0);
      }
      var ev = document.createEvent('Event');
        ev.initEvent('change', true, false);
        quant_Cart.dispatchEvent(ev);
    }

    function onkeyup(el) {
      let perentnode = el.parentNode
      let input_Cart = el;
      let quant_Cart = perentnode.nextSibling.nextSibling.children[1];

      let value = parseFloat(input_Cart.value);
      if(value >= min_qty){
      input_Cart.value = value.toFixed(2);
      quant_Cart.value = (input_Cart.value/step).toFixed(0);
      }
      var ev = document.createEvent('Event');
        ev.initEvent('change', true, false);
        quant_Cart.dispatchEvent(ev);
    }
</script>
3. Code Main Cart:- 

<div class="decimal_qty_cart">
  <span class="sub_cart" onclick="btnsub_cart_event(this)" id="sub">-</span>
  <input onkeyup="onkeyup(this)" onfocusout="focusout(this)" type="text" limit="2" id="decimal_cart" value="{{ item.quantity | times: 0.25 }}" min="0.25"  class="newInput decimal_cart" data-quantity-input1="">
  <span class="add_cart" onclick="btnadd_cart_event(this);" id="add">+</span>
</div>

==>Add this code to above end for in main cart
<script>
	var step = 1;
	var min_qty =1;
	var commonSet = true;

	if(commonSet){
	  step = parseFloat(0.25);
	  //alert(step);
	  min_qty= parseFloat(0.25);
	}else
	{   
	  step = parseFloat("");
	  min_qty= parseFloat();
	  //alert(step);
	}
</script>

==>Yah class jo riginal quantity input he usme dalnahe 
Class=> "js-qty__num_custom"
Like =><input class="quantity__input js-qty__num_custom" type="number" name="quantity">